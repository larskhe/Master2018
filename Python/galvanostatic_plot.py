import osimport matplotlib.pyplot as pltimport pandas as pdplt.style.use('ggplot')def cm2inch(*tupl):    inch = 2.54    if isinstance(tupl[0], tuple):        return tuple(i/inch for i in tupl[0])    else:        return tuple(i/inch for i in tupl)fileDir = '../Lab/Deposition/Cu2O/'list_of_files_in_dir = []for file in os.listdir(fileDir):    if file.endswith(".txt"):        list_of_files_in_dir.append(file)epsDir = os.path.join(fileDir, "Images", "eps")pngDir = os.path.join(fileDir, "Images", "png")if not os.path.exists(epsDir):    os.makedirs(os.path.join(fileDir, "Images", "eps"))if not os.path.exists(pngDir):    os.makedirs(os.path.join(fileDir, "Images", "png"))def data_collection(fileName):	df = pd.read_csv(fileDir + fileName, sep='	 ', skip_blank_lines=True, engine='python', decimal=',')	x = df['Elapsed Time (s)']	y = df['Potential (V)']	return x,ydef save_plot_large(x,y,fileName,customFigureName=None):    fig = plt.figure(figsize=cm2inch(30,13))    #fig.suptitle(fileName, fontsize=12, fontweight='light')    ax = fig.add_subplot(1,1,1)    ax.plot(x,y, lw=1)    ax.tick_params(labelsize=14)    ax.set_xlabel(r'Time / s',fontsize=16)    ax.set_ylabel(r'Potential / V',fontsize=16)    fig.subplots_adjust(left=0.10, right=0.98, top=0.9, bottom=0.15)    if customFigureName:    	fig.savefig(pngDir + "/" + customFigureName + '_large' + ".png", format="png")    	fig.savefig(epsDir + "/" + customFigureName + '_large' + ".eps", format="eps")    else:    	fig.savefig(pngDir + "/" + fileName + '_large' + ".png", format="png")    	fig.savefig(epsDir + "/" + fileName + '_large' + ".eps", format="eps")def save_plot_small(x,y,fileName,customFigureName=None):    fig = plt.figure(figsize=cm2inch(16,8))    #fig.suptitle(fileName, fontsize=12, fontweight='light')    ax = fig.add_subplot(1,1,1)    ax.plot(x,y, lw=1)    ax.tick_params(labelsize=9)    ax.set_xlabel(r'Time / s',fontsize=11)    ax.set_ylabel(r'Potential / V',fontsize=11)    fig.subplots_adjust(left=0.13, right=0.95, top=0.95, bottom=0.16)    if customFigureName:    	fig.savefig(pngDir + "/" + customFigureName + '_small' + ".png", format="png")    	fig.savefig(epsDir + "/" + customFigureName + '_small' + ".eps", format="eps")    else:    	fig.savefig(pngDir + "/" + fileName + '_small' + ".png", format="png")    	fig.savefig(epsDir + "/" + fileName + '_small' + ".eps", format="eps")for file in list_of_files_in_dir:	x,y = data_collection(file)	customFigureName = file.split('-')[0]	print(customFigureName)	save_plot_large(x,y,file,customFigureName)	save_plot_small(x,y,file,customFigureName)